#!/usr/bin/env python
import threading

import rospy
import smbus
#import the code generated by catkin.
#we need ServiceExample for the first message type,
#and the ServiceExampleResponse from the second message type from the  ServiceExample.srv file
from i2c.srv import i2c_frame, i2c_frameResponse, i2c_read_word, i2c_read_wordResponse, i2c_write_word, i2c_write_wordResponse, i2c_read_byte, i2c_read_byteResponse, i2c_write_byte, i2c_write_byteResponse, i2c_read_block, i2c_read_blockResponse

crc8x_table = [
    0x00, 0x31, 0x62, 0x53, 0xc4, 0xf5, 0xa6, 0x97, 0xb9, 0x88, 0xdb, 0xea, 0x7d,
    0x4c, 0x1f, 0x2e, 0x43, 0x72, 0x21, 0x10, 0x87, 0xb6, 0xe5, 0xd4, 0xfa, 0xcb,
    0x98, 0xa9, 0x3e, 0x0f, 0x5c, 0x6d, 0x86, 0xb7, 0xe4, 0xd5, 0x42, 0x73, 0x20,
    0x11, 0x3f, 0x0e, 0x5d, 0x6c, 0xfb, 0xca, 0x99, 0xa8, 0xc5, 0xf4, 0xa7, 0x96,
    0x01, 0x30, 0x63, 0x52, 0x7c, 0x4d, 0x1e, 0x2f, 0xb8, 0x89, 0xda, 0xeb, 0x3d,
    0x0c, 0x5f, 0x6e, 0xf9, 0xc8, 0x9b, 0xaa, 0x84, 0xb5, 0xe6, 0xd7, 0x40, 0x71,
    0x22, 0x13, 0x7e, 0x4f, 0x1c, 0x2d, 0xba, 0x8b, 0xd8, 0xe9, 0xc7, 0xf6, 0xa5,
    0x94, 0x03, 0x32, 0x61, 0x50, 0xbb, 0x8a, 0xd9, 0xe8, 0x7f, 0x4e, 0x1d, 0x2c,
    0x02, 0x33, 0x60, 0x51, 0xc6, 0xf7, 0xa4, 0x95, 0xf8, 0xc9, 0x9a, 0xab, 0x3c,
    0x0d, 0x5e, 0x6f, 0x41, 0x70, 0x23, 0x12, 0x85, 0xb4, 0xe7, 0xd6, 0x7a, 0x4b,
    0x18, 0x29, 0xbe, 0x8f, 0xdc, 0xed, 0xc3, 0xf2, 0xa1, 0x90, 0x07, 0x36, 0x65,
    0x54, 0x39, 0x08, 0x5b, 0x6a, 0xfd, 0xcc, 0x9f, 0xae, 0x80, 0xb1, 0xe2, 0xd3,
    0x44, 0x75, 0x26, 0x17, 0xfc, 0xcd, 0x9e, 0xaf, 0x38, 0x09, 0x5a, 0x6b, 0x45,
    0x74, 0x27, 0x16, 0x81, 0xb0, 0xe3, 0xd2, 0xbf, 0x8e, 0xdd, 0xec, 0x7b, 0x4a,
    0x19, 0x28, 0x06, 0x37, 0x64, 0x55, 0xc2, 0xf3, 0xa0, 0x91, 0x47, 0x76, 0x25,
    0x14, 0x83, 0xb2, 0xe1, 0xd0, 0xfe, 0xcf, 0x9c, 0xad, 0x3a, 0x0b, 0x58, 0x69,
    0x04, 0x35, 0x66, 0x57, 0xc0, 0xf1, 0xa2, 0x93, 0xbd, 0x8c, 0xdf, 0xee, 0x79,
    0x48, 0x1b, 0x2a, 0xc1, 0xf0, 0xa3, 0x92, 0x05, 0x34, 0x67, 0x56, 0x78, 0x49,
    0x1a, 0x2b, 0xbc, 0x8d, 0xde, 0xef, 0x82, 0xb3, 0xe0, 0xd1, 0x46, 0x77, 0x24,
    0x15, 0x3b, 0x0a, 0x59, 0x68, 0xff, 0xce, 0x9d, 0xac]

class Service:
    def __init__(self):
        # Initialize the node and name it.
        self.bus = smbus.SMBus(1)
        rospy.init_node('i2c_node')
        self.lock = threading.Lock()
        rospy.Service('i2c_service/frame', i2c_frame, self.frame)
        rospy.Service('i2c_service/read_word', i2c_read_word, self.read_word)
        rospy.Service('i2c_service/write_word', i2c_write_word, self.write_word)
        rospy.Service('i2c_service/read_byte', i2c_read_byte, self.read_byte)
        rospy.Service('i2c_service/write_byte', i2c_write_byte, self.write_byte)
        rospy.Service('i2c_service/read_block', i2c_read_block, self.read_block)
        rospy.loginfo(rospy.get_name() + " service is running.")

    def startCrc(self):
        global crc
        crc=0xff

    def getCrc(self):
        return crc

    def frame_write_byte(self,address,b):
        global crc
        rospy.loginfo(rospy.get_name() + " Writing byte "+str(b))
        self.bus.write_byte(address,b);
        crc=crc8x_table[crc ^b];

    def frame_read_byte(self,address):
        global crc
        b=self.bus.read_byte(address);
        crc=crc8x_table[crc ^b];
        return b


    def append_int(self,b,v):
        b.append(v >> 24 & 0xFF)
        b.append(v >> 16 & 0xFF)
        b.append(v >> 8 & 0xFF)
        b.append(v & 0xFF)

    def append_byte(self,b,v):
        b.append(v)


    def read_int(self,b,idx):
        v = b[idx];
        v = (v<<8) | b[idx+1];
        v = (v<<8) | b[idx+2];
        v = (v<<8) | b[idx+3];
        if v>=0x80000000:
            v-=0x100000000;
        return v, idx+4;

    def verify_reply_length(self,reply, expected_len):
        if len(reply) !=expected_len :
            raise Exception("Expected payload of size "+expected_len+", found "+len(reply))


    def frame(self,request):
        with self.lock:
            response=i2c_frameResponse()
            response.success = False
            ##Send the frame
            self.startCrc()
            self.frame_write_byte(request.address,len(request.req_data)+2) #add one byte for length, one byte for CRC
            for i in range(len(request.req_data)):
                self.frame_write_byte(request.address,ord(request.req_data[i]))
            self.frame_write_byte(request.address,self.getCrc())
            ##Receive the reply frame
            self.startCrc()
            l = self.frame_read_byte(request.address)
            error_code = self.frame_read_byte(request.address)
            b = []
            for i in range(l - 3): #Skip error code, length and CRC
                b.append(self.frame_read_byte(request.address))
            self.frame_read_byte(request.address) #Read the CRC
            if self.getCrc()!=0:
                rospy.loginfo(rospy.get_name() + " CRC mismatch")
                #TODO improve error handling
                #raise Exception('CRC error')
                return
            if error_code!=0:
                rospy.loginfo(rospy.get_name() + " Error code from controller: "+str(error_code))
                #TODO improve error handling
                #raise Exception('Error received: '+str(error_code))
                return
            response.resp_data = b
            response.success = True
            return response

    def read_word(self,request):
        with self.lock:
            response=i2c_read_wordResponse()
            # TODO: Exception handling
            response.word=self.bus.read_word_data(request.address, request.register) & 0xFFFF
            response.success=True
            return response

    def write_word(self,request):
        with self.lock:
            response=i2c_write_wordResponse()
            # TODO: Exception handling
            self.bus.write_word_data(request.address, request.register, request.word & 0xFFFF)
            response.success=True
            return response

    def read_byte(self,request):
        with self.lock:
            response=i2c_read_byteResponse()
            # TODO: Exception handling
            response.byte=self.bus.read_byte_data(request.address, request.register) & 0xFF
            response.success=True
            return response

    def write_byte(self,request):
        with self.lock:
            response=i2c_write_byteResponse()
            # TODO: Exception handling
            self.bus.write_byte_data(request.address, request.register, request.byte & 0xFF)
            response.success=True
            return response


    def read_block(self,request):
        with self.lock:
            response=i2c_read_blockResponse()
            # TODO: Exception handling
            data = []
            count=request.count
            while count > 0:
                # smbus driver limitation to read only 32 bytes at a time (why the hell!?).
                # if the hard limit of 32 or an optional limit provided inblock_size is exceeded, the read will be split in several transfers
                readnow = min(request.block_size, count,32)
                raw=self.bus.read_i2c_block_data(request.address, request.register, readnow)
                data.extend(raw)
                count = count - readnow
            response.data=data
            response.success=True
            return response

# Main function.
if __name__ == '__main__':
    service = Service()
    rospy.spin()

